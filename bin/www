#!/usr/bin/env node

const http = require('http')

let app = require('../app')

let Loggerr = require('loggerr')
const log = new Loggerr()

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404)
  log.info('------ error 404 ------')
  res.render('not-found')
})

app.use((err, req, res, next) => {
  // always log the error
  log.error(new Error(`ERROR: ${req.method} --- ${req.path} : ${err}`))

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500)
    res.render('error')
  }
})

let server = http.createServer(app)

server.on('error', error => {
  if (error.syscall !== 'listen') {
    throw error
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(new Error(`Port ${process.env.PORT} requires elevated privileges`))
      process.exit(1)
      break
    case 'EADDRINUSE':
      log.error(new Error(`Port ${process.env.PORT} is already in use`))
      process.exit(1)
      break
    default:
      throw error
  }
})

server.listen(process.env.PORT, () => {
  log.info('Listening on', { address: `http://localhost:${process.env.PORT}` })
})
//
